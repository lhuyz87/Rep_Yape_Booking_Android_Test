import java.text.SimpleDateFormat

def defDateFormat = new SimpleDateFormat("yyyyMMddHHmm")
def defDate = new Date()
def defTimestamp = defDateFormat.format(defDate).toString()

def secrets = [
  [path: 'AutoRimac/CanalApp-auto-def-Android', engineVersion: 2, secretValues: [
	    [envVar: 'v_SaucelabsUser', vaultKey: 'v_SaucelabsUser'],
	    [envVar: 'v_SaucelabsAccessKey', vaultKey: 'v_SaucelabsAccessKey'],
	    [envVar: 'v_correoDestino', vaultKey: 'v_correoDestino'],
	    [envVar: 'v_correoRemitente', vaultKey: 'v_correoRemitente'],
	    [envVar: 'v_passCorreoRemitente', vaultKey: 'v_passCorreoRemitente']
 	]
  ]
]


def configuration = [vaultUrl: 'http://localhost:8200',  vaultCredentialId: 'VaultCredential', engineVersion: 2]

pipeline {

    agent any

    tools {
        maven 'M3'
        jdk 'jdk8.221'
    }

    options {
		buildDiscarder(logRotator(numToKeepStr: '20'))
	    //disableConcurrentBuilds()
	}

    stages {
    
        stage ('Build') {
            steps {
            	script{
            		currentBuild.displayName = "MobileTesting-Android-SauceLabs [#${BUILD_NUMBER}]"
            	}
                sh ("mvn -X clean verify")
            }
        }

        stage('Ejecutar Pruebas'){
            steps{
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    script {
						try {
        				    sauce('saucelabs-US') {
        						sauceconnect(useGeneratedTunnelIdentifier: true, verboseLogging: true) {
									catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
		                            sh ("mvn test -Denvironment=saucelabs_Android -Dcucumber.features='src/test/resources/features/' -Dcucumber.filter.tags=\'${ESCENARIO}\' -Dcucumber.plugin=json:target/site/result.json -Dcucumber.glue='rimac' -P installAppCloudActual")
			                    	}
			                	}
	                    	}
                        }
                        catch (ex) {
                            echo 'Finalizo ejecucion con fallos...'
                            error ('Failed')
                        }
                    }
                }
            }
            post{
                always{
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                                            // Acciones a realizar en caso de que se produzca un error en la etapa de pruebas
                                        }

                    }
                }
        }
                   
        stage ('Reporte') {
            steps  {
                script {
                    try {
                        sh ("mvn serenity:aggregate")
                        echo 'Ejecucion de pruebas sin errores...'
                        //bat ("echo ${WORKSPACE}")
                        sh ("echo ${defTimestamp}")
                        publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: "${WORKSPACE}/target/site/serenity", reportFiles: 'index.html', reportName: 'Evidencias de Prueba', reportTitles: 'Reporte de Pruebas'])
                        //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${WORKSPACE}/target/site/serenity${defTimestamp}", reportFiles: 'index.html', reportName: 'Evidencias de Prueba', reportTitles: ''])
                        //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${WORKSPACE}\\target\\site\\serenity${defTimestamp}", reportFiles: 'index.html', reportName: 'Evidencias de Prueba', reportTitles: ''])
                        echo 'Reporte realizado con exito'
                    }
                    catch (ex) {
                        echo 'Reporte realizado con Fallos'
                        error ('Failed')
                    }
                }
            }
        }
    }
}